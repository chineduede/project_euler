# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

    # 1: 1
    # 3: 1,3
    # 6: 1,2,3,6
    # 10: 1,2,5,10
    # 15: 1,3,5,15
    # 21: 1,3,7,21
    # 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from typing import Generator, Set


def factors(num: int) -> Set:
	"""A function that finds all the factors of a number"""
	# factors is a list of factors for num
	start, stop, factors = 1, num, set()
	while start <= stop:					
		if num % start == 0:
			# num is a factor, find the other factor
			# that divides the number, reduce the upper
			# boundary, this reduces the range to check.
			other = int(num / start)
			# add both factors to the set
			factors.add(start)		
			factors.add(other)
			# reduce upper boundary
			stop = other
		start += 1				#walk foward
	return set(factors)


def triangle_num_gen() -> Generator[int, None, None]:
	"""Generate infinite triangular numbers"""
	i, j = 1, 2
	while True:
		yield i
		i, j = i + j, j + 1

def main(n: int) -> int:
	"""Find the first triangular number to have over
	n divisors. Returns the first number.
	
	:n -> The number of divisors."""

	for  i in triangle_num_gen():
		if len(factors(i)) > n:
			print(i)
			break

if __name__ == '__main__':
	main(500)
	
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

    # 1: 1
    # 3: 1,3
    # 6: 1,2,3,6
    # 10: 1,2,5,10
    # 15: 1,3,5,15
    # 21: 1,3,7,21
    # 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


# def factors_recur(num):
# 	"""A recursive function that finds all the factors of a number.
# 	works with numbers less than 800. use loop version for numbers
# 	greater."""
# 	def wrapper(start, stop, accum=None):
# 		if start == stop:					#base case
# 			return accum
# 		else:
# 			if num % start == 0:				#check if number is divisible by current num
# 				other = int(num / start)		#find the other pair of factors
# 				accum.update([start, other])	
# 			else:
# 				other = num						#if not a factor, leave end boundary as is.
# 			return wrapper(start + 1, other, accum)		#increase start by 1, change end boundary to other number
# 	return wrapper(1, num, set()) 

def factors(num):
	"""A function that finds all the factors of a number"""
	start, stop, factors = 1, num, []
	while start <= stop:
		if num % start == 0:
			other = int(num / start)
			factors.extend([start, other])
			stop = other
		start += 1
	return set(factors)


def triangle_num_gen():
	"""Generate infinite triangular numbers"""
	i, j = 1, 2
	while True:
		yield i
		i, j = i + j, j + 1

def main():
	for  i in triangle_num_gen():
		length = len(factors(i))
		if length > 500:
			print(i)
			break

if __name__ == '__main__':
	main()
	